
# ------------------------------------------------------------------------
#
# Illinois Queue: Local development configuration (not secret)
#
# Use "npm run dev" to run locally for testing.
# This file (.env.development) should be automatically used.
#
# Confirmed working locally with node:
# - v9.11.2 (end-of-life)
# - v14.15.5 (LTS until 2023-04-30)
#
# ------------------------------------------------------------------------

# export NODE_ENV="development" in your shell first.
# (Should happen automatically with "npm run dev".)
DB_DIALECT="sqlite"
DB_LOGGING="false"
DB_STORAGE="./dev.sqlite"

# ------------------------------------------------------------------------
# Maintenance note
# ------------------------------------------------------------------------
# Failure to specify the db dialect properly with a valid config causes an
# exception similar to this one to be thrown from node_modules/sequelize/
# lib/sequelize.js:
#
# "Dialect needs to be explicitly supplied as of v4.0.0"
# ------------------------------------------------------------------------

# ------------------------------------------------------------------------
# dotenv-flow Documentation taken from:
# https://www.npmjs.com/package/dotenv-flow#variables-overwritingpriority
# ------------------------------------------------------------------------
#
# Variables overwriting/priority
#
#  Since multiple .env* files are loaded simultaneously, all the variables
#  defined in these files are merged in the following order:
#
#   1. The .env file has the lowest priority. Keep the most default
#      (fallback)values there;
#
#   2. The .env.local file has a priority over the .env. Create it if you
#      want to overwrite the default values for your own environment-
#      specific needs;
#
#   3. NODE_ENV-specific env files (like .env.development, .env.test,
#      etc.) have a priority over the default .env and .env.local files.
#      Keep NODE_ENV-specific environment variables there;
#
#   4. NODE_ENV-specific local env files (.env.development.local,
#      .env.production.local, etc.) have the highest priority over all the
#      env files. As with .env.local, create them only if you need to
#      overwrite NODE_ENV-specific values for your own environment-specific
#      needs;
#
#   5. Environment variables that are already set will not be overwritten,
#      that means that the command line variables have a higher priority
#      over all those defined in env files;
#
# ------------------------------------------------------------------------
